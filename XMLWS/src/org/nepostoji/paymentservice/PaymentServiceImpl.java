
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package org.nepostoji.paymentservice;

import java.util.concurrent.ConcurrentHashMap;
import java.util.logging.Logger;

import org.example.nalogzaplacanje.NalogZaPlacanje;
import org.example.odgovor.Ishod;
import org.example.odgovor.Odgovor;

import factory.KeyFactory;
import model.Banka;
import model.Racun;

/**
 * This class was generated by Apache CXF 2.6.5
 * 2017-09-09T22:48:39.161+02:00
 * Generated source version: 2.6.5
 * 
 */

@javax.jws.WebService(
                      serviceName = "PaymentService",
                      portName = "PaymentPort",
                      targetNamespace = "http://www.nepostoji.org/PaymentService/",
                      wsdlLocation = "file:/D:/Users/Stevan/Literatura_I_Materijal/Aktuelno/XML_i_WS/Projekat/XML-WS-projekat/XMLWS/WEB-INF/wsdl/PaymentService.wsdl",
                      endpointInterface = "org.nepostoji.paymentservice.PaymentService")
                      
public class PaymentServiceImpl implements PaymentService {
	
	private ConcurrentHashMap<String, Banka> banke = new ConcurrentHashMap<>();
	private ConcurrentHashMap<String, Racun> racuni = new ConcurrentHashMap<>();

    private static final Logger LOG = Logger.getLogger(PaymentServiceImpl.class.getName());

    /* (non-Javadoc)
     * @see org.nepostoji.paymentservice.PaymentService#obradiNalog(org.nepostoji.paymentservice.PorukaNalogaPlacanja  parameters )*
     */
    public org.nepostoji.paymentservice.Odgovor obradiNalog(PorukaNalogaPlacanja parameters) { 
        LOG.info("Executing operation obradiNalog");
        System.out.println(parameters);
        try {
        	NalogZaPlacanje nalog = parameters.getNalog();
        	Racun racunDuznika = racuni.get(nalog.getRacunDuznika());
        	Racun racunPrimaoca = racuni.get(nalog.getRacunPrimaoca());
        	Odgovor odgovor = new Odgovor();
        	org.nepostoji.paymentservice.Odgovor _return = new org.nepostoji.paymentservice.Odgovor();
        	_return.odgovor = odgovor;
        	if(racunDuznika==null) {
        		odgovor.setIshod(Ishod.NEUSPJESAN);
        		odgovor.setPoruka("Nepostojeci racun duznika: " + nalog.getRacunDuznika());
        		return _return;
        	}
        	if(racunPrimaoca==null) {
        		odgovor.setIshod(Ishod.NEUSPJESAN);
        		odgovor.setPoruka("Nepostojeci racun primaoca: " + nalog.getRacunPrimaoca());
        		return _return;
        	}
        	try {
        		racunDuznika.izvrsiNalog(nalog, racunPrimaoca);
        		odgovor.setIshod(Ishod.USPJESAN);
        		odgovor.setPoruka("Nalog id: " + nalog.getIdNaloga() +  " uspjesno izvrsen");
        	} catch (Exception e) {
        		odgovor.setIshod(Ishod.NEUSPJESAN);
        		odgovor.setPoruka(e.getMessage());
			} 
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see org.nepostoji.paymentservice.PaymentService#prikaziPresjek(org.nepostoji.paymentservice.PorukaZahtijevaPresjeka  parameters )*
     */
    public org.nepostoji.paymentservice.PorukaPresjeka prikaziPresjek(PorukaZahtijevaPresjeka parameters) throws PrikaziPresjekFault    { 
        LOG.info("Executing operation prikaziPresjek");
        System.out.println(parameters);
        Racun trazeniRacun = racuni.get(parameters.getZahtijev().getBrojRacuna());
        if(trazeniRacun==null) {
        	throw new PrikaziPresjekFault("Racun sa id: " + parameters.getZahtijev().getBrojRacuna() + " ne postoji");
        }
        try {
            trazeniRacun.getPresjek();
        	org.nepostoji.paymentservice.PorukaPresjeka _return = new PorukaPresjeka();
        	_return.presjek = trazeniRacun.getPresjek();
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new PrikaziPresjekFault("prikaziPresjekFault...");
    }

    /* (non-Javadoc)
     * @see org.nepostoji.paymentservice.PaymentService#pokreniClearing(org.nepostoji.paymentservice.PogonskaPoruka  parameters )*
     */
    public org.nepostoji.paymentservice.Odgovor pokreniClearing(PogonskaPoruka parameters) { 
        LOG.info("Executing operation pokreniClearing");
        System.out.println("Poruka: " + parameters.getPoruka());
        try {
            org.nepostoji.paymentservice.Odgovor _return = null;
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see org.nepostoji.paymentservice.PaymentService#odobriSredstvaClearing(org.nepostoji.paymentservice.PorukaOdobrenjaClearing  parameters )*
     */
    public org.nepostoji.paymentservice.Odgovor odobriSredstvaClearing(PorukaOdobrenjaClearing parameters) { 
        LOG.info("Executing operation odobriSredstvaClearing");
        System.out.println(parameters);
        try {
            org.nepostoji.paymentservice.Odgovor _return = null;
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    /* (non-Javadoc)
     * @see org.nepostoji.paymentservice.PaymentService#odobriSredstvaRtgs(org.nepostoji.paymentservice.PorukaOdobrenjaRtgs  parameters )*
     */
    public org.nepostoji.paymentservice.Odgovor odobriSredstvaRtgs(PorukaOdobrenjaRtgs parameters) { 
        LOG.info("Executing operation odobriSredstvaRtgs");
        System.out.println(parameters);
        Racun racunDuznika = racuni.get(parameters.getMt103().getRacunDuznika());
        Racun racunPovjerioca = racuni.get(parameters.getMt103().getRacunPrimaoca());
        try {
            org.nepostoji.paymentservice.Odgovor _return = null;
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

}
